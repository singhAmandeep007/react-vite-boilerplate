/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as AppImport } from "./routes/app";
import { Route as AppDashboardImport } from "./routes/app/dashboard";
import { Route as AppSettingsImport } from "./routes/app/settings";
import { Route as AuthImport } from "./routes/auth";
import { Route as AuthForgotPasswordImport } from "./routes/auth/forgotPassword";
import { Route as AuthLoginImport } from "./routes/auth/login";
import { Route as AuthSignupImport } from "./routes/auth/signup";
import { Route as IndexImport } from "./routes/index";

// Create/Update Routes

const AuthRoute = AuthImport.update({
  id: "/auth",
  path: "/auth",
  getParentRoute: () => rootRoute,
} as any);

const AppRoute = AppImport.update({
  id: "/app",
  path: "/app",
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const AuthSignupRoute = AuthSignupImport.update({
  id: "/signup",
  path: "/signup",
  getParentRoute: () => AuthRoute,
} as any);

const AuthLoginRoute = AuthLoginImport.update({
  id: "/login",
  path: "/login",
  getParentRoute: () => AuthRoute,
} as any);

const AuthForgotPasswordRoute = AuthForgotPasswordImport.update({
  id: "/forgotPassword",
  path: "/forgotPassword",
  getParentRoute: () => AuthRoute,
} as any);

const AppSettingsRoute = AppSettingsImport.update({
  id: "/settings",
  path: "/settings",
  getParentRoute: () => AppRoute,
} as any);

const AppDashboardRoute = AppDashboardImport.update({
  id: "/dashboard",
  path: "/dashboard",
  getParentRoute: () => AppRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/app": {
      id: "/app";
      path: "/app";
      fullPath: "/app";
      preLoaderRoute: typeof AppImport;
      parentRoute: typeof rootRoute;
    };
    "/auth": {
      id: "/auth";
      path: "/auth";
      fullPath: "/auth";
      preLoaderRoute: typeof AuthImport;
      parentRoute: typeof rootRoute;
    };
    "/app/dashboard": {
      id: "/app/dashboard";
      path: "/dashboard";
      fullPath: "/app/dashboard";
      preLoaderRoute: typeof AppDashboardImport;
      parentRoute: typeof AppImport;
    };
    "/app/settings": {
      id: "/app/settings";
      path: "/settings";
      fullPath: "/app/settings";
      preLoaderRoute: typeof AppSettingsImport;
      parentRoute: typeof AppImport;
    };
    "/auth/forgotPassword": {
      id: "/auth/forgotPassword";
      path: "/forgotPassword";
      fullPath: "/auth/forgotPassword";
      preLoaderRoute: typeof AuthForgotPasswordImport;
      parentRoute: typeof AuthImport;
    };
    "/auth/login": {
      id: "/auth/login";
      path: "/login";
      fullPath: "/auth/login";
      preLoaderRoute: typeof AuthLoginImport;
      parentRoute: typeof AuthImport;
    };
    "/auth/signup": {
      id: "/auth/signup";
      path: "/signup";
      fullPath: "/auth/signup";
      preLoaderRoute: typeof AuthSignupImport;
      parentRoute: typeof AuthImport;
    };
  }
}

// Create and export the route tree

interface AppRouteChildren {
  AppDashboardRoute: typeof AppDashboardRoute;
  AppSettingsRoute: typeof AppSettingsRoute;
}

const AppRouteChildren: AppRouteChildren = {
  AppDashboardRoute: AppDashboardRoute,
  AppSettingsRoute: AppSettingsRoute,
};

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren);

interface AuthRouteChildren {
  AuthForgotPasswordRoute: typeof AuthForgotPasswordRoute;
  AuthLoginRoute: typeof AuthLoginRoute;
  AuthSignupRoute: typeof AuthSignupRoute;
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthForgotPasswordRoute: AuthForgotPasswordRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthSignupRoute: AuthSignupRoute,
};

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/app": typeof AppRouteWithChildren;
  "/auth": typeof AuthRouteWithChildren;
  "/app/dashboard": typeof AppDashboardRoute;
  "/app/settings": typeof AppSettingsRoute;
  "/auth/forgotPassword": typeof AuthForgotPasswordRoute;
  "/auth/login": typeof AuthLoginRoute;
  "/auth/signup": typeof AuthSignupRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/app": typeof AppRouteWithChildren;
  "/auth": typeof AuthRouteWithChildren;
  "/app/dashboard": typeof AppDashboardRoute;
  "/app/settings": typeof AppSettingsRoute;
  "/auth/forgotPassword": typeof AuthForgotPasswordRoute;
  "/auth/login": typeof AuthLoginRoute;
  "/auth/signup": typeof AuthSignupRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/app": typeof AppRouteWithChildren;
  "/auth": typeof AuthRouteWithChildren;
  "/app/dashboard": typeof AppDashboardRoute;
  "/app/settings": typeof AppSettingsRoute;
  "/auth/forgotPassword": typeof AuthForgotPasswordRoute;
  "/auth/login": typeof AuthLoginRoute;
  "/auth/signup": typeof AuthSignupRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/app"
    | "/auth"
    | "/app/dashboard"
    | "/app/settings"
    | "/auth/forgotPassword"
    | "/auth/login"
    | "/auth/signup";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/app"
    | "/auth"
    | "/app/dashboard"
    | "/app/settings"
    | "/auth/forgotPassword"
    | "/auth/login"
    | "/auth/signup";
  id:
    | "__root__"
    | "/"
    | "/app"
    | "/auth"
    | "/app/dashboard"
    | "/app/settings"
    | "/auth/forgotPassword"
    | "/auth/login"
    | "/auth/signup";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AppRoute: typeof AppRouteWithChildren;
  AuthRoute: typeof AuthRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRoute: AppRouteWithChildren,
  AuthRoute: AuthRouteWithChildren,
};

export const routeTree = rootRoute._addFileChildren(rootRouteChildren)._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/app",
        "/auth"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/app": {
      "filePath": "app.tsx",
      "children": [
        "/app/dashboard",
        "/app/settings"
      ]
    },
    "/auth": {
      "filePath": "auth.tsx",
      "children": [
        "/auth/forgotPassword",
        "/auth/login",
        "/auth/signup"
      ]
    },
    "/app/dashboard": {
      "filePath": "app/dashboard.tsx",
      "parent": "/app"
    },
    "/app/settings": {
      "filePath": "app/settings.tsx",
      "parent": "/app"
    },
    "/auth/forgotPassword": {
      "filePath": "auth/forgotPassword.tsx",
      "parent": "/auth"
    },
    "/auth/login": {
      "filePath": "auth/login.tsx",
      "parent": "/auth"
    },
    "/auth/signup": {
      "filePath": "auth/signup.tsx",
      "parent": "/auth"
    }
  }
}
ROUTE_MANIFEST_END */
